# Task: Check if a number is even
def is_even(n):
    return n % 2 == 0


# Task: Find maximum number in a list
def find_max(lst):
    if not lst:
        raise ValueError("Empty list")
    return max(lst)


# Task: Calculate factorial using recursion
def factorial(n):
    if n < 0:
        raise ValueError("Negative numbers not allowed")
    return 1 if n <= 1 else n * factorial(n - 1)


# Task: Count vowels in a string
def count_vowels(s):
    vowels = 'aeiouAEIOU'
    return sum(1 for ch in s if ch in vowels)


# Task: Generate Fibonacci sequence
def fibonacci(n):
    if n <= 0:
        return []
    seq = [0, 1]
    for _ in range(2, n):
        seq.append(seq[-1] + seq[-2])
    return seq[:n]


# Task: Check if number is prime
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True


# Task: Reverse a string
def reverse_string(s):
    return s[::-1]


# Task: Check if string is palindrome
def is_palindrome(s):
    s = s.lower().replace(" ", "")
    return s == s[::-1]


# Task: Sum of digits of a number
def sum_of_digits(n):
    return sum(int(d) for d in str(abs(n)))


# Task: Find GCD of two numbers
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a


# Task: Find LCM of two numbers
def lcm(a, b):
    return abs(a * b) // gcd(a, b)


# Task: Remove duplicates from a list
def remove_duplicates(lst):
    return list(dict.fromkeys(lst))


# Task: Find second largest number
def second_largest(lst):
    uniq = sorted(set(lst), reverse=True)
    if len(uniq) < 2:
        raise ValueError("Not enough unique numbers")
    return uniq[1]


# Task: Merge two dictionaries
def merge_dicts(d1, d2):
    return {**d1, **d2}


# Task: Count word frequency in a string
def word_frequency(s):
    from collections import Counter
    return dict(Counter(s.split()))


# Task: Find common elements in two lists
def common_elements(l1, l2):
    return list(set(l1) & set(l2))


# Task: Convert Celsius to Fahrenheit
def c_to_f(c):
    return (c * 9/5) + 32


# Task: Convert Fahrenheit to Celsius
def f_to_c(f):
    return (f - 32) * 5/9


# Task: Flatten a nested list
def flatten_list(nested):
    flat = []
    for i in nested:
        if isinstance(i, list):
            flat.extend(flatten_list(i))
        else:
            flat.append(i)
    return flat


# Task: Calculate area of a circle
def area_circle(radius):
    import math
    return math.pi * radius ** 2


# Task: Check if year is leap year
def is_leap_year(year):
    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)


# Task: Find longest word in a sentence
def longest_word(sentence):
    words = sentence.split()
    return max(words, key=len)


# Task: Convert list to string
def list_to_string(lst):
    return "".join(map(str, lst))


# Task: Find all factors of a number
def factors(n):
    return [i for i in range(1, n+1) if n % i == 0]


# Task: Check if number is Armstrong
def is_armstrong(n):
    s = str(n)
    p = len(s)
    return sum(int(d) ** p for d in s) == n


# Task: Sort dictionary by value
def sort_dict_by_value(d):
    return dict(sorted(d.items(), key=lambda x: x[1]))


# Task: Get unique characters in a string
def unique_chars(s):
    return "".join(sorted(set(s)))


# Task: Find missing number in sequence
def find_missing(nums):
    n = len(nums) + 1
    return n * (n + 1) // 2 - sum(nums)


# Task: Replace spaces with underscores
def replace_spaces(s):
    return s.replace(" ", "_")


# Task: Check if two strings are anagrams
def is_anagram(s1, s2):
    return sorted(s1.lower()) == sorted(s2.lower())


# Task: Sum of even numbers in list
def sum_even(lst):
    return sum(x for x in lst if x % 2 == 0)


# Task: Multiply all numbers in list
def multiply_list(lst):
    from functools import reduce
    return reduce(lambda x, y: x * y, lst, 1)


# Task: Find smallest number in list
def smallest(lst):
    return min(lst)


# Task: Get first n prime numbers
def first_n_primes(n):
    primes = []
    num = 2
    while len(primes) < n:
        if is_prime(num):
            primes.append(num)
        num += 1
    return primes


# Task: Count uppercase letters in string
def count_upper(s):
    return sum(1 for ch in s if ch.isupper())


# Task: Count lowercase letters in string
def count_lower(s):
    return sum(1 for ch in s if ch.islower())


# Task: Calculate power of number
def power(base, exp):
    return base ** exp