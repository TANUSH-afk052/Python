# Task: Write a Python function to check if a number is even
def is_even(n):
    return n % 2 == 0

# Task: JavaScript function to reverse a string
function reverse(str) {
    return str.split('').reverse().join('');
}

# Task: Python function to find the maximum number in a list
def find_max(numbers):
    return max(numbers)

# Task: JavaScript loop to print numbers 1 to 10
for (let i = 1; i <= 10; i++) {
    console.log(i);
}

# Task: Python function to calculate factorial of a number
def factorial(n):
    if n <= 1:
        return 1
    return n * factorial(n - 1)

# Task: Node.js function to read a file
const fs = require('fs');
function readFile(filename) {
    return fs.readFileSync(filename, 'utf8');
}

# Task: JavaScript function to check if a string is a palindrome
function isPalindrome(str) {
    const cleaned = str.toLowerCase().replace(/[^a-z0-9]/g, '');
    return cleaned === cleaned.split('').reverse().join('');
}

# Task: Python function to count vowels in a string
def count_vowels(text):
    vowels = 'aeiouAEIOU'
    return sum(1 for char in text if char in vowels)

# Task: JavaScript function to get unique elements from an array
function getUnique(arr) {
    return [...new Set(arr)];
}

# Task: Python function to convert Celsius to Fahrenheit
def celsius_to_fahrenheit(celsius):
    return (celsius * 9/5) + 32

# Task: Node.js function to write data to a file
const fs = require('fs');
function writeFile(filename, data) {
    fs.writeFileSync(filename, data);
}

# Task: JavaScript function to sum all numbers in an array
function sumArray(numbers) {
    return numbers.reduce((sum, num) => sum + num, 0);
}

# Task: Python function to check if a string contains only digits
def is_numeric(text):
    return text.isdigit()

# Task: JavaScript function to capitalize first letter of each word
function capitalizeWords(str) {
    return str.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
}

# Task: Python function to remove duplicates from a list
def remove_duplicates(lst):
    return list(set(lst))

# Task: Node.js simple HTTP server
const http = require('http');
const server = http.createServer((req, res) => {
    res.writeHead(200, {'Content-Type': 'text/plain'});
    res.end('Hello World');
});
server.listen(3000);

# Task: JavaScript function to find the average of numbers in an array
function average(numbers) {
    return numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
}

# Task: Python function to generate Fibonacci sequence up to n terms
def fibonacci(n):
    sequence = [0, 1]
    for i in range(2, n):
        sequence.append(sequence[i-1] + sequence[i-2])
    return sequence[:n]

# Task: JavaScript function to sort an array of objects by property
function sortByProperty(arr, property) {
    return arr.sort((a, b) => a[property] - b[property]);
}

# Task: Python function to calculate the area of a circle
import math
def circle_area(radius):
    return math.pi * radius ** 2

# Task: JavaScript function to find minimum value in array
function findMin(arr) {
    return Math.min(...arr);
}

# Task: Python function to check if a number is prime
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

# Task: Node.js function to make HTTP GET request
const https = require('https');
function httpGet(url, callback) {
    https.get(url, (res) => {
        let data = '';
        res.on('data', (chunk) => data += chunk);
        res.on('end', () => callback(data));
    });
}

# Task: JavaScript function to convert string to title case
function toTitleCase(str) {
    return str.toLowerCase().split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
}

# Task: Python function to count words in a string
def count_words(text):
    return len(text.split())

# Task: JavaScript function to check if array contains a value
function contains(arr, value) {
    return arr.includes(value);
}

# Task: Python function to merge two lists
def merge_lists(list1, list2):
    return list1 + list2

# Task: JavaScript function to get current timestamp
function getCurrentTimestamp() {
    return Date.now();
}

# Task: Python function to calculate square root
import math
def square_root(n):
    return math.sqrt(n)

# Task: Node.js function to create directory
const fs = require('fs');
function createDir(dirName) {
    if (!fs.existsSync(dirName)) {
        fs.mkdirSync(dirName);
    }
}

# Task: JavaScript function to format number with commas
function formatNumber(num) {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

# Task: Python function to convert string to lowercase
def to_lower(text):
    return text.lower()

# Task: JavaScript function to generate random number between min and max
function randomBetween(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

# Task: Python function to check if list is empty
def is_empty(lst):
    return len(lst) == 0

# Task: JavaScript function to remove whitespace from string
function trim(str) {
    return str.trim();
}

# Task: Python function to get current date and time
import datetime
def get_current_datetime():
    return datetime.datetime.now()

# Task: Node.js function to parse JSON from file
const fs = require('fs');
function parseJsonFile(filename) {
    const data = fs.readFileSync(filename, 'utf8');
    return JSON.parse(data);
}

# Task: JavaScript function to check if string starts with substring
function startsWith(str, prefix) {
    return str.startsWith(prefix);
}

# Task: Python function to calculate power of a number
def power(base, exponent):
    return base ** exponent

# Task: JavaScript function to convert array to string
function arrayToString(arr) {
    return arr.join(',');
}

# Task: Python function to find length of string
def string_length(text):
    return len(text)

# Task: JavaScript function to check if number is positive
function isPositive(num) {
    return num > 0;
}

# Task: Python function to create dictionary from two lists
def create_dict(keys, values):
    return dict(zip(keys, values))

# Task: Node.js function to get file extension
const path = require('path');
function getFileExtension(filename) {
    return path.extname(filename);
}

# Task: JavaScript function to round number to 2 decimal places
function roundToTwo(num) {
    return Math.round(num * 100) / 100;
}

# Task: Python function to sort list in ascending order
def sort_ascending(lst):
    return sorted(lst)

# Task: JavaScript function to check if string ends with substring
function endsWith(str, suffix) {
    return str.endsWith(suffix);
}

# Task: Python function to get absolute value
def absolute(n):
    return abs(n)

# Task: JavaScript function to convert string to number
function toNumber(str) {
    return Number(str);
}

# Task: Python function to check if key exists in dictionary
def key_exists(dictionary, key):
    return key in dictionary

# Task: Node.js function to get current working directory
const process = require('process');
function getCurrentDir() {
    return process.cwd();
}

# Task: JavaScript function to get length of array
function arrayLength(arr) {
    return arr.length;
}

# Task: Python function to replace substring in string
def replace_substring(text, old, new):
    return text.replace(old, new)

# Task: JavaScript function to convert to uppercase
function toUpper(str) {
    return str.toUpperCase();
}

# Task: Python function to check if number is negative
def is_negative(n):
    return n < 0

# Task: JavaScript function to get first element of array
function getFirst(arr) {
    return arr[0];
}

# Task: Python function to concatenate strings
def concat_strings(str1, str2):
    return str1 + str2

# Task: Node.js function to check if file exists
const fs = require('fs');
function fileExists(filename) {
    return fs.existsSync(filename);
}

# Task: JavaScript function to get last element of array
function getLast(arr) {
    return arr[arr.length - 1];
}

# Task: Python function to convert integer to string
def int_to_string(n):
    return str(n)

# Task: JavaScript function to check if value is undefined
function isUndefined(value) {
    return value === undefined;
}

# Task: Python function to get keys from dictionary
def get_keys(dictionary):
    return list(dictionary.keys())

# Task: JavaScript function to multiply two numbers
function multiply(a, b) {
    return a * b;
}

# Task: Python function to check if string is empty
def is_empty_string(text):
    return len(text) == 0

# Task: Node.js function to join file paths
const path = require('path');
function joinPaths(path1, path2) {
    return path.join(path1, path2);
}

# Task: JavaScript function to divide two numbers
function divide(a, b) {
    return b !== 0 ? a / b : null;
}

# Task: Python function to get values from dictionary
def get_values(dictionary):
    return list(dictionary.values())

# Task: JavaScript function to add two numbers
function add(a, b) {
    return a + b;
}

# Task: Python function to convert list to string
def list_to_string(lst):
    return ' '.join(map(str, lst))

# Task: JavaScript function to subtract two numbers
function subtract(a, b) {
    return a - b;
}

# Task: Python function to check if number is zero
def is_zero(n):
    return n == 0

# Task: JavaScript function to check if array is empty
function isEmptyArray(arr) {
    return arr.length === 0;
}

# Task: Python function to get first element of list
def get_first(lst):
    return lst[0] if lst else None

# Task: Node.js function to convert object to JSON string
function objectToJson(obj) {
    return JSON.stringify(obj);
}

# Task: Python function to solve Two Sum problem
def two_sum(nums, target):
    num_map = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in num_map:
            return [num_map[complement], i]
        num_map[num] = i
    return []

# Task: Python function to check if a string is a valid palindrome
def is_valid_palindrome(s):
    cleaned = ''.join(char.lower() for char in s if char.isalnum())
    return cleaned == cleaned[::-1]

# Task: Python function to find maximum subarray sum
def max_subarray(nums):
    max_sum = current_sum = nums[0]
    for num in nums[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum

# Task: Python function to merge two sorted arrays
def merge_sorted_arrays(nums1, m, nums2, n):
    i, j, k = m - 1, n - 1, m + n - 1
    while j >= 0:
        if i >= 0 and nums1[i] > nums2[j]:
            nums1[k] = nums1[i]
            i -= 1
        else:
            nums1[k] = nums2[j]
            j -= 1
        k -= 1

# Task: Python function to remove duplicates from sorted array
def remove_duplicates(nums):
    if not nums:
        return 0
    i = 0
    for j in range(1, len(nums)):
        if nums[j] != nums[i]:
            i += 1
            nums[i] = nums[j]
    return i + 1

# Task: Python function to find single number in array
def single_number(nums):
    result = 0
    for num in nums:
        result ^= num
    return result

# Task: Python function to find intersection of two arrays
def intersect(nums1, nums2):
    from collections import Counter
    count1, count2 = Counter(nums1), Counter(nums2)
    result = []
    for num in count1:
        if num in count2:
            result.extend([num] * min(count1[num], count2[num]))
    return result

# Task: Python function to move all zeros to end of array
def move_zeroes(nums):
    left = 0
    for right in range(len(nums)):
        if nums[right] != 0:
            nums[left], nums[right] = nums[right], nums[left]
            left += 1

# Task: Python function to find majority element
def majority_element(nums):
    candidate, count = nums[0], 1
    for i in range(1, len(nums)):
        if nums[i] == candidate:
            count += 1
        else:
            count -= 1
            if count == 0:
                candidate = nums[i]
                count = 1
    return candidate

# Task: Python function to reverse integer
def reverse_integer(x):
    sign = -1 if x < 0 else 1
    x = abs(x)
    result = 0
    while x:
        result = result * 10 + x % 10
        x //= 10
    result *= sign
    return result if -2**31 <= result <= 2**31 - 1 else 0

# Task: Python function to find missing number in array
def missing_number(nums):
    n = len(nums)
    expected_sum = n * (n + 1) // 2
    actual_sum = sum(nums)
    return expected_sum - actual_sum

# Task: Python function to check if two strings are anagrams
def is_anagram(s, t):
    if len(s) != len(t):
        return False
    from collections import Counter
    return Counter(s) == Counter(t)

# Task: Python function to find first unique character in string
def first_unique_char(s):
    from collections import Counter
    char_count = Counter(s)
    for i, char in enumerate(s):
        if char_count[char] == 1:
            return i
    return -1

# Task: Python function to check if string contains all unique characters
def is_unique(s):
    return len(s) == len(set(s))

# Task: Python function to rotate array to right by k steps
def rotate_array(nums, k):
    n = len(nums)
    k = k % n
    nums[:] = nums[-k:] + nums[:-k]

# Task: Python function to find longest common prefix of strings
def longest_common_prefix(strs):
    if not strs:
        return ""
    prefix = strs[0]
    for s in strs[1:]:
        while not s.startswith(prefix):
            prefix = prefix[:-1]
            if not prefix:
                return ""
    return prefix

# Task: Python function to check if parentheses are valid
def is_valid_parentheses(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}
    for char in s:
        if char in mapping:
            if not stack or stack.pop() != mapping[char]:
                return False
        else:
            stack.append(char)
    return not stack

# Task: Python function to find peak element in array
def find_peak_element(nums):
    left, right = 0, len(nums) - 1
    while left < right:
        mid = (left + right) // 2
        if nums[mid] < nums[mid + 1]:
            left = mid + 1
        else:
            right = mid
    return left

# Task: Python function to check if number is happy number
def is_happy(n):
    def get_sum(num):
        total = 0
        while num:
            digit = num % 10
            total += digit * digit
            num //= 10
        return total
    
    seen = set()
    while n != 1 and n not in seen:
        seen.add(n)
        n = get_sum(n)
    return n == 1